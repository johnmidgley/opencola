// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages, require_trailing_commas
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'package:opencola_flutter/api/api.dart';
import 'package:opencola_flutter/app_state.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final List<ModelEntity> _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6929792767577550342),
      name: 'AppStorage',
      lastPropertyId: const IdUid(4, 2861031227636882481),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6511485304696962630),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 2861031227636882481),
            name: 'appBlob',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4317378272155289943),
      name: 'CredentialStorage',
      lastPropertyId: const IdUid(6, 8761966336877804195),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6593354769173429928),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 1746982385847571406),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 760354633776900076),
            name: 'authToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8761966336877804195),
            name: 'ipAddress',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final ModelInfo model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 4317378272155289943),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const <int>[],
      retiredIndexUids: const <int>[],
      retiredPropertyUids: const <int>[
        2538400187845017684,
        2457578134782849538,
        4064629172800067713,
        4387436767629335278
      ],
      retiredRelationUids: const <int>[],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final Map<Type, EntityDefinition<dynamic>> bindings = <Type, EntityDefinition<dynamic>>{
    AppStorage: EntityDefinition<AppStorage>(
        model: _entities[0],
        toOneRelations: (AppStorage object) => <ToOne<dynamic>>[],
        toManyRelations: (AppStorage object) => <RelInfo<dynamic>, ToMany<dynamic>>{},
        getId: (AppStorage object) => object.id,
        setId: (AppStorage object, int id) {
          object.id = id;
        },
        objectToFB: (AppStorage object, fb.Builder fbb) {
          final int? appBlobOffset =
              object.appBlob == null ? null : fbb.writeString(object.appBlob!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(3, appBlobOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final fb.BufferContext buffer = fb.BufferContext(fbData);
          final int rootOffset = buffer.derefObject(0);

          final AppStorage object = AppStorage()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..appBlob = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        }),
    CredentialStorage: EntityDefinition<CredentialStorage>(
        model: _entities[1],
        toOneRelations: (CredentialStorage object) => <ToOne<dynamic>>[],
        toManyRelations: (CredentialStorage object) => <RelInfo<dynamic>, ToMany<dynamic>>{},
        getId: (CredentialStorage object) => object.id,
        setId: (CredentialStorage object, int id) {
          object.id = id;
        },
        objectToFB: (CredentialStorage object, fb.Builder fbb) {
          final int? passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final int? authTokenOffset = object.authToken == null
              ? null
              : fbb.writeString(object.authToken!);
          final int? ipAddressOffset = object.ipAddress == null
              ? null
              : fbb.writeString(object.ipAddress!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, passwordOffset);
          fbb.addOffset(4, authTokenOffset);
          fbb.addOffset(5, ipAddressOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final fb.BufferContext buffer = fb.BufferContext(fbData);
          final int rootOffset = buffer.derefObject(0);

          final CredentialStorage object = CredentialStorage()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..authToken = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..ipAddress = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppStorage] entity fields to define ObjectBox queries.
class AppStorage_ {
  /// see [AppStorage.id]
  static final QueryIntegerProperty<AppStorage> id =
      QueryIntegerProperty<AppStorage>(_entities[0].properties[0]);

  /// see [AppStorage.appBlob]
  static final QueryStringProperty<AppStorage> appBlob =
      QueryStringProperty<AppStorage>(_entities[0].properties[1]);
}

/// [CredentialStorage] entity fields to define ObjectBox queries.
class CredentialStorage_ {
  /// see [CredentialStorage.id]
  static final QueryIntegerProperty<CredentialStorage> id =
      QueryIntegerProperty<CredentialStorage>(_entities[1].properties[0]);

  /// see [CredentialStorage.password]
  static final QueryStringProperty<CredentialStorage> password =
      QueryStringProperty<CredentialStorage>(_entities[1].properties[1]);

  /// see [CredentialStorage.authToken]
  static final QueryStringProperty<CredentialStorage> authToken =
      QueryStringProperty<CredentialStorage>(_entities[1].properties[2]);

  /// see [CredentialStorage.ipAddress]
  static final QueryStringProperty<CredentialStorage> ipAddress =
      QueryStringProperty<CredentialStorage>(_entities[1].properties[3]);
}
