# AWS CLI Scripts

## Installation
* [Setting up with Amazon ECR](https://docs.aws.amazon.com/AmazonECR/latest/userguide/get-set-up-for-amazon-ecr.html)
* [Using Amazon ECR with the AWS CLI](https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html)


### AWS CLI installation instructions ([source](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html))

```
$ curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
$ sudo installer -pkg AWSCLIV2.pkg -target /
```

**To test:**

```
$ which aws
/usr/local/bin/aws
$ aws --version
aws-cli/2.4.5 Python/3.8.8 Darwin/18.7.0 botocore/2.4.5
```

**Create Credentials**
* Got to [IAM Console](https://us-east-1.console.aws.amazon.com/iamv2/home#/home) and follow [Set up credentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html)


## Login
Login, required before using other commands:
```
aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 147892678753.dkr.ecr.us-west-2.amazonaws.com
```

# Create private repository ECS repository named 'test'

# ECR Link:
https://us-west-2.console.aws.amazon.com/ecr/repositories?region=us-west-2

# Result:
147892678753.dkr.ecr.us-west-2.amazonaws.com/test

# Build and tag:

./install
docker build -t oc-relay .
docker tag oc-relay:latest 147892678753.dkr.ecr.us-west-2.amazonaws.com/test:latest

# Push to ECR

# May need to login
aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 147892678753.dkr.ecr.us-west-2.amazonaws.com

docker push 147892678753.dkr.ecr.us-west-2.amazonaws.com/test:latest

# Create task definition

Task definition configuration:
    Task definition family: test-task-definition

Infrastructure requirements:
    AWS Fargate: true
    CPU: .5vCPU
    Memory: 1 GB

Container - 1:
    name: relay
    image URI: 147892678753.dkr.ecr.us-west-2.amazonaws.com/test
    Essential: Yes

    Container port: 80
    Protocol: TCP
    Port name: [Auto fill] relay-80-tcp
    App protocol: http

# Create Cluster

Cluster configuration:
    Cluster name: testCluster

Infrastructure:
    AWS Fargate (serverless): true


# Create security group

https://us-west-2.console.aws.amazon.com/ec2/home?region=us-west-2#SecurityGroups:

# Load balancer needs an inbound rule allow access to port 80 (or 2652)

# Create Service

Environment:
    Compute options: Launch type
    Launch type: FARGATE
    Platform version: LATEST

Deployment configuration:
    Application type: Service
    Family: test-task-definition
    Service name: test-svc
    Service type:
        Replica: true

Networking:
    (Used existing VPC and security group)

Load Balancing:
    Load Balancer:
        Load balancer type: Application Load Balancer
        Application Load Balancer:
            Create a new load balancer: true
            Load balancer name: test-lb
            Health check grace period: 0
    Container:
        Choose container to load balance: relay 80:80 # WHERE DID THIS COME FROM?
        Listener:
            Create new listener: true
            Port: 80
            Protocol: HTTP
        Target Group:
            Create new target group: true
            Target group name: test-lb-tg
            Protocol: HTTP
            Health check protocol: HTTP
            Health check path: /







